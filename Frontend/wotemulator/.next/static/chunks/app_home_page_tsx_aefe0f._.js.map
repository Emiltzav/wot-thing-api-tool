{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/workspace/TUC/Thesis/1%29Aimilios/Frontend/wotemulator/app/home/page.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\r\n\"use client\"\r\nimport App from \"next/app\";\r\nimport Image from 'next/image';\r\nimport React, { ChangeEvent, useEffect, useState } from \"react\";\r\nimport { json } from \"stream/consumers\";\r\nimport { DataFetch } from \"../api/apiCommunicator\";\r\n\r\n\r\ninterface Message {\r\n    topic: string;\r\n    messages: unknown[];\r\n}\r\n\r\ninterface AppData {\r\n    messages: Message[];\r\n    protocol: string;\r\n}\r\nexport default function Home() {\r\n    const [appState, setAppState] = useState<AppData>(\r\n        {\r\n            messages: [],\r\n            protocol: \"KAFKA\"\r\n        }\r\n    );\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"flex  flex-col  items-center justify-center h-screen  w-screen   bg-slate-600 space-y-2 \">\r\n            <MainContainer appState={appState} setAppState={setAppState} />\r\n        </div>);\r\n\r\n}\r\n\r\n\r\n\r\ninterface AppProps {\r\n    appState: AppData;\r\n    setAppState: React.Dispatch<React.SetStateAction<AppData>>;\r\n}\r\nfunction MainContainer(props: AppProps) {\r\n    const [topicCount, setTopicCount] = useState(0);\r\n    const topics: React.ReactNode[] = [];\r\n\r\n    // Button Handler\r\n    const addHandler = () => {\r\n        // Copy app state\r\n        // eslint-disable-next-line prefer-const\r\n        let appStateCopy = { ...props.appState };\r\n\r\n        // Append a new topic with empty messages\r\n        appStateCopy.messages.push(\r\n            {\r\n                topic: \"Default Topic \" + topicCount.toString(),\r\n                messages: []\r\n            }\r\n        )\r\n        // Error checking\r\n        if (typeof props.setAppState !== \"function\") {\r\n            return;\r\n        }\r\n        // Set component state (just a simple topic counter)\r\n        setTopicCount(topicCount + 1);\r\n        // Set app state\r\n        props.setAppState(appStateCopy);\r\n\r\n    }\r\n\r\n    // For every topic generate a TopicContainer\r\n    if (typeof props.appState === \"object\" && props.appState !== null) {\r\n\r\n        // Loop through each topic and create a TopicContainer\r\n        for (let i = 0; i < props.appState.messages.length; i++) {\r\n            topics.push(<TopicContainer\r\n                key={props.appState.messages[i][\"topic\"]}\r\n                appState={props.appState}\r\n                setAppState={props.setAppState}\r\n                topicID={props.appState.messages[i][\"topic\"]} />\r\n            );\r\n        }\r\n    }\r\n\r\n    const SendRequest = async () => {\r\n        // Generate Thing Description\r\n        const asyncapiTD = {\r\n            asyncapi: \"3.0.0\",\r\n            info: {\r\n                title: \"Emulated Device\",\r\n                version: \"1.0\"\r\n            },\r\n            servers: {\r\n                main_server: {\r\n                    host: \"host:9092\",\r\n                    protocol: \"kafka\"\r\n                }\r\n            },\r\n            channels: {\r\n                properties_resource_channel: {\r\n                    messages: {\r\n\r\n                    } as { [key: string]: unknown }\r\n                }\r\n            },\r\n            operations: {\r\n                properties_resource_operation: {\r\n                    action: \"send\",\r\n                    channel: {\r\n                        $ref: \"#/channels/properties_resource_channel\"\r\n                    },\r\n                    messages: [\r\n\r\n                    ] as { [key: string]: unknown }[]\r\n                }\r\n            },\r\n            components: {\r\n                schemas: {\r\n\r\n                } as { [key: string]: unknown },\r\n                messages: {\r\n\r\n                } as { [key: string]: unknown }\r\n            }\r\n        }\r\n\r\n        const jsonSchemaType = new Map<string, string>(\r\n            [\r\n                [\"str\", \"string\"],\r\n                [\"bytes\", \"string\"],\r\n                [\"bytes\", \"string\"],\r\n                [\"bytes\", \"string\"],\r\n                [\"int\", \"number\"],\r\n                [\"float\", \"number\"],\r\n                [\"bool\", \"boolean\"],\r\n                [\"dict\", \"object\"],\r\n                [\"List[str]\", \"array;string\"],\r\n                [\"List[bytes]\", \"array;string\"],\r\n                [\"List[int]\", \"array;number\"],\r\n                [\"List[float]\", \"array;number\"],\r\n                [\"List[bool]\", \"array;boolean\"],\r\n                [\"List[dict]\", \"array;object\"]\r\n            ]\r\n        )\r\n\r\n        if (typeof props.appState.messages !== \"undefined\") {\r\n            //Loop topic\r\n            for (let i = 0; i < props.appState.messages.length; i++) {\r\n                const selectedTopic = props.appState.messages[i]\r\n                // Loop Topic Messages\r\n                for (let j = 0; j < selectedTopic.messages.length; j++) {\r\n                    const selectedMsg = selectedTopic.messages[j] as { messageID: string, [key: string]: string }\r\n                    const msgID = selectedMsg[\"messageID\"]\r\n                    const payload: {\r\n                        type: string;\r\n                        properties: { [key: string]: { type: string, items?: { type: string } } };\r\n                    } = {\r\n                        type: \"object\",\r\n                        properties: {}\r\n                    }\r\n                    // Loop message fields\r\n                    for (const key in selectedMsg) {\r\n                        if (key === \"messageID\") continue\r\n                        const fieldID = key\r\n                        const fieldTypeCode = jsonSchemaType.get(selectedMsg[key])\r\n                        if (typeof fieldTypeCode !== \"undefined\") {\r\n                            const fieldType = fieldTypeCode.split(\";\");\r\n                            if (fieldType.length > 1) {\r\n                                payload.properties[fieldID] = {\r\n                                    type: \"array\",\r\n                                    items: {\r\n                                        type: fieldType[1]\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                payload.properties[fieldID] = {\r\n                                    type: fieldType[0]\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    asyncapiTD.components.schemas[msgID + \"_payload\"] = payload\r\n                    asyncapiTD.components.messages[msgID] = {\r\n                        payload: {\r\n                            $ref: \"#/components/schemas/\" + msgID + \"_payload\"\r\n                        }\r\n                    }\r\n                    asyncapiTD.channels.properties_resource_channel.messages[msgID] = {\r\n                        $ref: \"#/components/messages/\" + msgID\r\n                    }\r\n                    asyncapiTD.operations.properties_resource_operation.messages.push(\r\n                        {\r\n                            $ref: \"#/channels/properties_resource_channel/messages/\" + msgID\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        const tdAsJson = JSON.stringify(asyncapiTD, null, 2)\r\n        const blob = new Blob([tdAsJson], { type: 'application/json' })\r\n        const href = URL.createObjectURL(blob);\r\n\r\n        const link = document.createElement('a')\r\n        link.href = href;\r\n        link.download = \"EmulatedDeviceTD.json\"\r\n        document.body.appendChild(link)\r\n        link.click()\r\n        document.body.removeChild(link)\r\n        URL.revokeObjectURL(href)\r\n        // const res = await DataFetch(props.appState)\r\n        // if (res.error === \"true\") {\r\n        //     alert(res.msg)\r\n\r\n        // }\r\n        // else {\r\n        //     const activeAppData = JSON.stringify(props.appState);\r\n        //     const encodedData = encodeURIComponent(activeAppData);\r\n        //     window.open('/kafka?data=' + encodedData, '_blank', 'noopener, noreferrer');\r\n        // }\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-col overflow-y-scroll  w-1/3 space-y-2 bg-orange-200 rounded-md p-2\">\r\n            <div className=\"flex flex-col  space-y-2 w-full\">\r\n                {topics}\r\n            </div>\r\n            <ProtocolContainer appState={props.appState} setAppState={props.setAppState} />\r\n            <div className=\"flex flex-row  justify-end w-full\">\r\n                <button className=\"btn btn-active btn-primary   \" onClick={addHandler}>Add Topic</button>\r\n            </div>\r\n            <div>\r\n                <button className=\"btn btn-active btn-primary  \" onClick={SendRequest}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\ninterface TopicContainerProps extends AppProps {\r\n    topicID: string;\r\n}\r\nfunction TopicContainer(props: TopicContainerProps) {\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    const [activeTopicID, setActiveTopicID] = useState<string>(props.topicID); // The topicID that is currently active (used for search and assign operations)\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    const [currentTopicID, setCurrentTopicID] = useState<string>(props.topicID); // The new topicID that will replace the active one \r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    const [generatedMessages, setGeneratedMessages] = useState<number>(0); // Count user generated messages\r\n\r\n    // Message Display\r\n    // eslint-disable-next-line prefer-const\r\n    let displayMessages: React.ReactNode[] = [];\r\n    for (let i = 0; i < props.appState.messages.length; i++) {\r\n        if (props.appState.messages[i][\"topic\"] === activeTopicID) {\r\n            if ('messages' in props.appState.messages[i]) {\r\n                const topicMessages = props.appState.messages[i].messages;\r\n                for (let j = 0; j < topicMessages.length; j++) {\r\n                    displayMessages.push(<SingleMessage key={(topicMessages[j] as { messageID: string })['messageID']} messageID={(topicMessages[j] as { messageID: string })['messageID']} appState={props.appState} setAppState={props.setAppState} topicID={activeTopicID} />);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // ============================== Handlers ==============================\r\n    const topicChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setCurrentTopicID(event.target.value);\r\n    }\r\n\r\n    const saveHandler = () => {\r\n        // check empty\r\n        if (currentTopicID.trim().length === 0) {\r\n            alert(\"Topic cannot be empty\");\r\n            return\r\n        }\r\n        setActiveTopicID(currentTopicID);\r\n        // eslint-disable-next-line prefer-const\r\n        let appStateCopy = { ...props.appState };\r\n        for (let i = 0; i < appStateCopy.messages.length; i++) {\r\n            if (appStateCopy.messages[i][\"topic\"] === activeTopicID) {\r\n                appStateCopy.messages[i][\"topic\"] = currentTopicID;\r\n\r\n                // Error checking\r\n                if (typeof props.setAppState !== \"function\") {\r\n                    return;\r\n                }\r\n                props.setAppState(appStateCopy);\r\n            }\r\n        }\r\n    }\r\n\r\n    const addMessageHandler = () => {\r\n        const appStateCopy = { ...props.appState }\r\n\r\n        for (let i = 0; i < appStateCopy.messages.length; i++) {\r\n            if (appStateCopy.messages[i][\"topic\"] === activeTopicID) {\r\n                if ('messages' in appStateCopy.messages[i]) {\r\n                    appStateCopy.messages[i]['messages'].push(\r\n                        { \"messageID\": activeTopicID + \"_MessageID_\" + generatedMessages.toString() }\r\n                    )\r\n                    // Component state\r\n                    setGeneratedMessages(generatedMessages + 1)\r\n                    if (typeof props.setAppState === 'function') {\r\n                        props.setAppState(appStateCopy)\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const deleteTopic = () => {\r\n        const appStateCopy = { ...props.appState }\r\n        appStateCopy['messages'] = appStateCopy['messages'].filter(\r\n            (item) => item['topic'] !== activeTopicID\r\n        )\r\n\r\n        if (typeof props.setAppState === 'function') {\r\n            props.setAppState(appStateCopy);\r\n        }\r\n    }\r\n    // ============================== Handlers ==============================\r\n\r\n\r\n    return (\r\n        <div className=\"flex flex-col  space-x-2   border-2 border-gray-500 rounded-md p-2\">\r\n            <div className=\"flex flex-row  space-x-2 items-center\">\r\n                <label>Topic:</label>\r\n                <input onChange={topicChangeHandler} type=\"text\" value={currentTopicID} className=\"input input-bordered w-full max-w-xs bg-white\" />\r\n                <button className=\"btn btn-active btn-success \" onClick={saveHandler}>Save</button>\r\n                <button className=\"btn btn-active btn-error \" onClick={deleteTopic}>Delete</button>\r\n            </div>\r\n            <br />\r\n            <div className=\"flex flex-col items-start  space-y-2 w-full\">\r\n                <div className=\"grid grid-cols-2 gap-4 w-full items-center justify-between\">\r\n                    <div>\r\n                        <label>Messages:</label>\r\n                    </div>\r\n                    <div className=\"justify-self-end pr-2\">\r\n                        <button className=\"btn btn-active btn-primary   \" onClick={addMessageHandler}>Add</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"w-full flex flex-col space-y-4\">\r\n                    {displayMessages}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface SingleMessageProps extends AppProps {\r\n    topicID: string;\r\n    messageID: string;\r\n}\r\n// Represents a single message\r\nfunction SingleMessage(props: SingleMessageProps) {\r\n    const [activeMessageID, setActiveMessageID] = useState(props.messageID);\r\n    const [currentMessageID, setCurrentMessageID] = useState(props.messageID);\r\n    const [fieldCount, setFieldCount] = useState<number>(0)\r\n\r\n    // Load message fields\r\n    const displayFields: React.ReactNode[] = [];\r\n    for (const msg of props.appState['messages']) {\r\n        if (msg['topic'] === props.topicID) {\r\n            for (let i = 0; i < msg['messages'].length; i++) {\r\n                const currentMessage = (msg['messages'][i] as { messageID: string })\r\n                if (currentMessage['messageID'] === activeMessageID) {\r\n                    let counter = 0;\r\n                    for (const [key, value] of Object.entries(currentMessage)) {\r\n                        if (key === 'messageID') continue\r\n                        displayFields.push(\r\n                            <MessageField\r\n                                key={props.topicID + \"_\" + props.messageID + \"_\" + key + \"_\" + counter.toString()}\r\n                                topicID={props.topicID}\r\n                                messageID={props.messageID}\r\n                                fieldID={key}\r\n                                currentType={value}\r\n                                appState={props.appState}\r\n                                setAppState={props.setAppState}\r\n                            />\r\n                        )\r\n                        counter++\r\n                    }\r\n                }\r\n            }\r\n            break\r\n        }\r\n    }\r\n\r\n\r\n    // Set the message id\r\n    const changeMessageID = (event: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        setCurrentMessageID(event.target.value)\r\n    }\r\n\r\n    /**\r\n     *  Create a new field for the current message\r\n     */\r\n    const appendMessageField = () => {\r\n        const appStateCopy = { ...props.appState }\r\n        const DEFAULT_FIELD_ID = \"Default_field_ID_\" + fieldCount.toString()\r\n        const DEFAULT_FIELD_TYPE = \"str\"\r\n\r\n        for (const msg of appStateCopy['messages']) {\r\n            if (msg['topic'] === props.topicID) {\r\n                for (let i = 0; i < msg['messages'].length; i++) {\r\n                    const currentMessage = (msg['messages'][i] as { messageID: string, [key: string]: string })\r\n                    if (currentMessage['messageID'] === activeMessageID) {\r\n                        currentMessage[DEFAULT_FIELD_ID] = DEFAULT_FIELD_TYPE;\r\n                        break\r\n                    }\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        if (typeof props.setAppState === 'function') {\r\n            props.setAppState(appStateCopy)\r\n        }\r\n        setFieldCount(fieldCount + 1)\r\n    }\r\n    /**\r\n     *  Delete a message with all its fields\r\n     */\r\n    const deleteMsg = () => {\r\n        const appStateCopy = { ...props.appState }\r\n        const newMessagesArray: unknown[] = []\r\n        // Loop all messages\r\n        for (let i = 0; i < appStateCopy.messages.length; i++) {\r\n            // Topic Match\r\n            if (appStateCopy.messages[i].topic === props.topicID) {\r\n                const selectedTopic: number = i; // Save index of topic\r\n                // Loop all topic messages\r\n                for (let msgIndx = 0; msgIndx < appStateCopy.messages[selectedTopic].messages.length; msgIndx++) {\r\n                    if ((appStateCopy.messages[selectedTopic].messages[msgIndx] as { messageID: string })['messageID'] !== activeMessageID) {\r\n                        // If not the current message save\r\n                        newMessagesArray.push(\r\n                            appStateCopy.messages[selectedTopic].messages[msgIndx]\r\n                        )\r\n                    }\r\n                }\r\n                // Update topic messages array\r\n                appStateCopy.messages[selectedTopic].messages = [...newMessagesArray]\r\n                // Update app state\r\n                if (typeof props.setAppState === 'function') {\r\n                    props.setAppState(appStateCopy)\r\n                }\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    const saveMsg = () => {\r\n        const appStateCopy: AppData = { ...props.appState }\r\n        // Update app state\r\n        for (const msg of appStateCopy['messages']) {\r\n            if (msg['topic'] === props.topicID) {\r\n                for (const singleMsg of msg['messages']) {\r\n                    if ((singleMsg as { messageID: string })['messageID'] === activeMessageID) {\r\n                        (singleMsg as { messageID: string })['messageID'] = currentMessageID;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        props.setAppState(appStateCopy)\r\n    }\r\n\r\n    return (\r\n        <div id='SingleMessageContainer' className=\"flex flex-col w-full  \">\r\n            <div id='messageIDContainer' className=\"flex flex-row space-x-2 w-full items-center pr-1\">\r\n                <label>MessageID:</label>\r\n                <input type=\"text\" value={currentMessageID} className=\"input input-bordered w-full max-w-xs bg-white input-sm\" onChange={changeMessageID} />\r\n                <button className=\"btn btn-active btn-success   \" onClick={saveMsg}>Save</button>\r\n                <button className=\"btn btn-active btn-error   \" onClick={deleteMsg}>Delete</button>\r\n            </div>\r\n            <div id='fieldContainer' className=\"flex flex-col\">\r\n                {displayFields}\r\n            </div>\r\n            <div className=\"flex flex-row justify-end w-full pr-1\">\r\n                <button onClick={appendMessageField}>\r\n                    <Image\r\n                        src=\"/add.png\" // Path to the image in the public folder\r\n                        alt=\"Button Icon\"\r\n                        width={20} // Adjust width as needed\r\n                        height={20} // Adjust height as needed\r\n                    />\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface MessageFieldProps extends SingleMessageProps {\r\n    fieldID: string,\r\n    currentType: string\r\n}\r\n\r\nfunction MessageField(props: MessageFieldProps) {\r\n    const [activeFieldID, setActiveFieldID] = useState(props.fieldID)\r\n    const [currentFieldID, setCurrentFieldID] = useState(props.fieldID)\r\n    const [fieldType, setFieldType] = useState(props.currentType)\r\n\r\n    const AvailableFieldTypes: { [key: string]: string } = {\r\n        strType: \"str\",\r\n        floatType: \"float\",\r\n        intType: \"int\",\r\n        boolType: \"bool\",\r\n        bytesType: \"bytes\",\r\n        objectType: \"dict\",\r\n        strList: \"List[str]\",\r\n        floatList: \"List[float]\",\r\n        intList: \"List[int]\",\r\n        boolList: \"List[bool]\",\r\n        bytesList: \"List[bytes]\",\r\n        objectList: \"List[dict]\"\r\n    }\r\n\r\n\r\n\r\n    // Generate options for the select element\r\n    const typeOptions: React.ReactNode[] = [];\r\n    for (const key in AvailableFieldTypes) {\r\n        typeOptions.push(<option key={key} value={AvailableFieldTypes[key]}>{AvailableFieldTypes[key]}</option>);\r\n    }\r\n\r\n\r\n    const fieldIDHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setCurrentFieldID(event.target.value)\r\n\r\n    }\r\n\r\n    const fieldTypeHandler = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        const appStateCopy = ChangeFieldType(props.appState, props.topicID, props.messageID, activeFieldID, event.target.value)\r\n        props.setAppState(appStateCopy)\r\n        setFieldType(event.target.value)\r\n    }\r\n\r\n    const deleteField = () => {\r\n        const appStateCopy = DeleteField(props.appState, props.topicID, props.messageID, activeFieldID)\r\n        props.setAppState(appStateCopy)\r\n    }\r\n\r\n    const saveID = () => {\r\n        const appStateCopy = ChangeFieldID(props.appState, props.topicID, props.messageID, activeFieldID, currentFieldID)\r\n        props.setAppState(appStateCopy)\r\n        setActiveFieldID(currentFieldID)\r\n        alert(\"New Field ID: \" + currentFieldID)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"flex flex-row  w-full space-y-5 space-x-2 items-baseline\">\r\n            <div>\r\n                <input type=\"text\" value={currentFieldID} className=\"input input-bordered w-full max-w-xs bg-white\" onChange={fieldIDHandler} />\r\n            </div>\r\n            <div>\r\n                <select className=\"select w-full max-w-xs bg-white\" value={fieldType} onChange={fieldTypeHandler}>\r\n                    {typeOptions}\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <button className=\"btn btn-active btn-success   \" onClick={saveID}>Save </button>\r\n            </div>\r\n            <div>\r\n                <button className=\"btn btn-active btn-error   \" onClick={deleteField}>Delete</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n/**\r\n *  Display a dropdown selection about the protocol.\r\n */\r\nfunction ProtocolContainer(props: AppProps) {\r\n    const [selectedProtocol, setSelectedProtocol] = useState(props.appState.protocol);\r\n    const AvailableProtocols: { [key: string]: string } = {\r\n        KAFKA: \"KAFKA\",\r\n        MQTT: \"MQTT\",\r\n    }\r\n\r\n    // Generate option element for every available protocol\r\n    const protocolOptions: React.ReactNode[] = [];\r\n    for (const protocol in AvailableProtocols) {\r\n        protocolOptions.push(<option key={protocol} value={protocol}>{protocol}</option>);\r\n    }\r\n\r\n    const protocolChangeHandler = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        // eslint-disable-next-line prefer-const\r\n        let appStateCopy = { ...props.appState };\r\n        appStateCopy.protocol = event.target.value;\r\n        setSelectedProtocol(event.target.value);\r\n        // Error checking\r\n        if (typeof props.setAppState !== \"function\") {\r\n            return;\r\n        }\r\n        props.setAppState(appStateCopy);\r\n    }\r\n    return (\r\n        <div className=\"flex flex-row items-center space-x-2\">\r\n            <label>Protocol:</label>\r\n            <select className=\"select w-full max-w-xs bg-white\" value={selectedProtocol} onChange={protocolChangeHandler}>\r\n                {protocolOptions}\r\n            </select>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n// ******************************** Helper Functions ********************************\r\n\r\nfunction ChangeFieldID(appData: AppData, topicID: string, messageID: string, currentFieldID: string, newFieldID: string): AppData {\r\n    const appDataCopy = { ...appData };\r\n\r\n    for (let i = 0; i < appDataCopy.messages.length; i++) {\r\n        const selectedMsg = appDataCopy.messages[i] // array of messages\r\n        if (selectedMsg.topic === topicID) {\r\n            for (let topicMessageIndex = 0; topicMessageIndex < selectedMsg.messages.length; topicMessageIndex++) {\r\n                const topicMsg = selectedMsg.messages[topicMessageIndex] as { messageID: string, [key: string]: string }\r\n                if (topicMsg.messageID === messageID) {\r\n                    // Copy this message fields to another with the new field ID. Then replace the old field with the new\r\n                    const temp: { messageID: string, [key: string]: string } = { messageID: topicMsg.messageID };\r\n                    for (const field in topicMsg) {\r\n                        if (field === currentFieldID) {\r\n                            temp[newFieldID] = topicMsg[currentFieldID]\r\n                        }\r\n                        else {\r\n                            temp[field] = topicMsg[field]\r\n                        }\r\n                    }\r\n                    appDataCopy.messages[i].messages[topicMessageIndex] = temp;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return appDataCopy;\r\n}\r\n\r\nfunction ChangeFieldType(appData: AppData, topicID: string, messageID: string, fieldID: string, fieldType: string): AppData {\r\n    const appDataCopy = { ...appData };\r\n\r\n    for (let i = 0; i < appDataCopy.messages.length; i++) {\r\n        if (appDataCopy.messages[i].topic === topicID) {\r\n            for (let topicMessageIndex = 0; topicMessageIndex < appDataCopy.messages[i].messages.length; topicMessageIndex++) {\r\n                if ((appDataCopy.messages[i].messages[topicMessageIndex] as { [key: string]: string }).messageID === messageID) {\r\n                    (appDataCopy.messages[i].messages[topicMessageIndex] as { [key: string]: string })[fieldID] = fieldType\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return appDataCopy;\r\n}\r\n\r\nfunction DeleteField(appData: AppData, topicID: string, messageID: string, fieldID: string): AppData {\r\n\r\n    const appDataCopy = { ...appData };\r\n\r\n    for (let i = 0; i < appDataCopy.messages.length; i++) {\r\n        const selectedMsg = appDataCopy.messages[i] // array of messages\r\n        if (selectedMsg.topic === topicID) {\r\n            for (let topicMessageIndex = 0; topicMessageIndex < selectedMsg.messages.length; topicMessageIndex++) {\r\n                const topicMsg = selectedMsg.messages[topicMessageIndex] as { messageID: string, [key: string]: string }\r\n                if (topicMsg.messageID === messageID) {\r\n                    // Copy this message fields to another with the new field ID. Then replace the old field with the new\r\n                    const temp: { messageID: string, [key: string]: string } = { messageID: topicMsg.messageID };\r\n                    for (const field in topicMsg) {\r\n                        if (field === fieldID) continue\r\n\r\n                        temp[field] = topicMsg[field]\r\n\r\n                    }\r\n                    appDataCopy.messages[i].messages[topicMessageIndex] = temp;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return appDataCopy;\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 983, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}